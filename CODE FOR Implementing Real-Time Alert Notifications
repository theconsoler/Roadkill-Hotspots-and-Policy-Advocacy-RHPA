import cv2
import numpy as np
import winsound  # For sound alerts (Windows users)
from ultralytics import YOLO

# Load YOLOv5 model
model = YOLO("C:/Users/ASUS/Downloads/JUPYTER PROJECTS/RHPA PROJECT/yolov5xu.pt")

# Load input video
video_path = "C:/Users/ASUS/Downloads/JUPYTER PROJECTS/RHPA PROJECT/dog runs across the road in front of car.mp4"
cap = cv2.VideoCapture(video_path)

# Ensure the video opened correctly
if not cap.isOpened():
    print("Error: Could not open video file.")
    exit()

# Get video properties
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))
fps = int(cap.get(cv2.CAP_PROP_FPS))

# Define codec and create VideoWriter object
output_path = "C:/Users/ASUS/Downloads/JUPYTER PROJECTS/RHPA PROJECT/output_alert_video.mp4"
fourcc = cv2.VideoWriter_fourcc(*'mp4v')  
out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Detect animals with YOLO
    results = model(frame)

    for result in results:
        boxes = result.boxes.xyxy.cpu().numpy()  # Get bounding boxes

        for box in boxes:
            x_min, y_min, x_max, y_max = map(int, box)

            # Draw bounding box
            cv2.rectangle(frame, (x_min, y_min), (x_max, y_max), (0, 0, 255), 2)  # Red for alert

            # Check if animal is in the high-risk zone (center of frame)
            center_x = (x_min + x_max) / 2

            if frame_width * 0.3 < center_x < frame_width * 0.7:
                print("High-Risk Animal Detected! Sending Alert...")

                # Play an alert sound (Windows only)
                try:
                    winsound.Beep(1000, 500)
                except RuntimeError:
                    print("Beep function failed (not supported on this system).")

                # Display warning on video
                cv2.putText(frame, "HIGH-RISK ANIMAL!", (x_min, y_min - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    # Write processed frame to output video
    out.write(frame)

# Release resources properly
cap.release()
out.release()


print(f"Processed video saved at: {output_path}")
